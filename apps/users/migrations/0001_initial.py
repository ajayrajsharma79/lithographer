# Generated by Django 5.2 on 2025-04-18 06:53

import apps.users.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('codename', models.CharField(help_text="Unique identifier for the permission (e.g., 'publish_article').", max_length=100, primary_key=True, serialize=False, unique=True, verbose_name='Codename')),
                ('name', models.CharField(help_text="Human-readable name for the permission (e.g., 'Can publish articles').", max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Optional description of what the permission allows.', verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
                'ordering': ['codename'],
            },
        ),
        migrations.CreateModel(
            name='CMSUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='cmsuser_set', related_query_name='cmsuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='cmsuser_set', related_query_name='cmsuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'CMS User',
                'verbose_name_plural': 'CMS Users',
                'ordering': ['email'],
            },
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('key', models.CharField(default=apps.users.models.generate_api_key, editable=False, help_text='The unique API key string.', max_length=100, unique=True, verbose_name='API Key')),
                ('name', models.CharField(help_text="A descriptive name for the API key (e.g., 'External Blog Integration').", max_length=100, verbose_name='Key Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('last_used_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Used At')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the API key is currently active.', verbose_name='Is Active')),
                ('user', models.ForeignKey(help_text='The CMS user associated with this key.', on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL, verbose_name='Associated User')),
            ],
            options={
                'verbose_name': 'API Key',
                'verbose_name_plural': 'API Keys',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Unique name for the role (e.g., 'Administrator', 'Editor').", max_length=100, unique=True, verbose_name='Role Name')),
                ('description', models.TextField(blank=True, help_text="Optional description of the role's purpose.", verbose_name='Description')),
                ('is_system_role', models.BooleanField(default=False, help_text='System roles (like Administrator) cannot be deleted.', verbose_name='Is System Role')),
                ('permissions', models.ManyToManyField(blank=True, help_text='Permissions granted to this role.', related_name='roles', to='users.permission', verbose_name='Permissions')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='cmsuser',
            name='roles',
            field=models.ManyToManyField(blank=True, help_text='Roles assigned to this user.', related_name='users', to='users.role', verbose_name='Roles'),
        ),
    ]
