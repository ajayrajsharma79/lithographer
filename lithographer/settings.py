"""
Django settings for the Lithographer CMS project.

Generated by 'django-admin startproject' using Django 5.2.
For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize django-environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])

# Application definition

INSTALLED_APPS = [
    # Django Core Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # Required by some packages, good practice

    # Third-Party Apps
    'rest_framework',
    'rest_framework.authtoken', # For DRF Token Authentication (CMS User API Keys)
    'rest_framework_simplejwt', # For JWT Authentication (FrontEnd User API)
    'rest_framework_simplejwt.token_blacklist', # Optional: If using token blacklist feature
    'graphene_django',
    'django_filters', # For DRF filtering
    # 'corsheaders', # Uncomment if you need CORS support

    # Lithographer CMS Apps (Order might matter for dependencies/templates)
    'apps.core.apps.CoreConfig',
    'apps.users.apps.UsersConfig',
    'apps.frontend_users.apps.FrontendUsersConfig',
    'apps.media.apps.MediaConfig',
    'apps.comments.apps.CommentsConfig',
    'apps.webhooks.apps.WebhooksConfig',
    'apps.layouts.apps.LayoutsConfig',
    'apps.content.apps.ContentConfig',
    'apps.components.apps.ComponentsConfig', # Added Components app
    # Add other CMS apps here as they are developed (e.g., taxonomy)

    # Celery (if using django-celery-results or similar)
    # 'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'corsheaders.middleware.CorsMiddleware', # Place high, before CommonMiddleware
    'django.middleware.locale.LocaleMiddleware', # For multilingual support
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lithographer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Project-level templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n', # For language switching
            ],
        },
    },
]

WSGI_APPLICATION = 'lithographer.wsgi.application'
ASGI_APPLICATION = 'lithographer.asgi.application' # For potential async features

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Uses DATABASE_URL from .env file
DATABASES = {
    'default': env.db(), # Reads DATABASE_URL
}
DATABASES['default']['ATOMIC_REQUESTS'] = True # Wrap views in transactions

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Get available languages from the database eventually, but start with defaults
# LANGUAGES = [(lang.code, lang.name) for lang in Language.objects.filter(is_active=True)]
LANGUAGES = [
    ('en', _('English')),
    ('fr', _('French')), # Example
    # Add more languages as needed
]
LANGUAGE_CODE = 'en' # Default language code (should match a default Language model instance)
LOCALE_PATHS = [BASE_DIR / 'locale'] # Directory for translation files

TIME_ZONE = env('TIME_ZONE', default='UTC')

USE_I18N = True # Enable internationalization

USE_TZ = True # Enable timezone support


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles' # For collectstatic in production
STATICFILES_DIRS = [
    BASE_DIR / "static", # Project-level static files
]

# Media files (User-uploaded content)
# https://docs.djangoproject.com/en/5.2/topics/files/

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default File Storage (Local filesystem for development)
# For production, consider using django-storages with S3, GCS, etc.
# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', default=None)
# AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', default=None)
# AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME', default=None)
# AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME', default=None)
# AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
# AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
# AWS_DEFAULT_ACL = None # Default: None (private) or 'public-read'
# AWS_LOCATION = 'media' # Optional: Subdirectory within the bucket
# MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication Settings
AUTH_USER_MODEL = 'users.CMSUser' # Use our custom CMS user model
LOGIN_URL = '/admin/login/' # Or your custom login URL
LOGIN_REDIRECT_URL = '/' # Where to redirect after login
LOGOUT_REDIRECT_URL = '/' # Where to redirect after logout

# Django REST Framework (DRF) Settings
# https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Order matters: JWT first for frontend API, then Token for CMS API keys, then Session for Admin/Browsable API
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # Sensible default: require authentication for API access
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
        # More specific permissions should be set per-viewset
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20, # Default page size for pagination
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema', # For OpenAPI spec generation
}

# Graphene-Django Settings
# https://docs.graphene-python.org/projects/django/en/latest/settings/
GRAPHENE = {
    'SCHEMA': 'lithographer.schema.schema', # Path to your GraphQL schema
    'MIDDLEWARE': [
        # Add any GraphQL specific middleware here
    ],
    # 'SCHEMA_OUTPUT': 'data/schema.graphql',  # Optional: Dump schema file
    # 'SCHEMA_INDENT': 2,  # Optional: Schema dump indentation
}

# Celery Configuration
# https://docs.celeryq.dev/en/stable/userguide/configuration.html
CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/1')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/2')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone
CELERY_TASK_TRACK_STARTED = True
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # If using scheduled tasks

# Caching (Using Redis)
# https://docs.djangoproject.com/en/5.2/topics/cache/
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": env('REDIS_URL', default='redis://localhost:6379/0'), # Use DB 0 for cache
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Email Settings
# https://docs.djangoproject.com/en/5.2/topics/email/
EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = env('EMAIL_HOST', default=None)
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default=None)
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default=None)
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='webmaster@localhost')
SERVER_EMAIL = env('SERVER_EMAIL', default=DEFAULT_FROM_EMAIL) # For error emails

# Security Settings (Placeholders - Review and configure for production)
# CSRF_COOKIE_SECURE = not DEBUG # Set to True in production
# SESSION_COOKIE_SECURE = not DEBUG # Set to True in production
# SECURE_SSL_REDIRECT = not DEBUG # Set to True in production
# SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0 # Example: 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
# SECURE_HSTS_PRELOAD = not DEBUG
# SECURE_BROWSER_XSS_FILTER = True
# SECURE_CONTENT_TYPE_NOSNIFF = True
# X_FRAME_OPTIONS = 'DENY' # Default is SAMEORIGIN, DENY is more restrictive

# CORS Settings (Uncomment and configure if needed)
# https://github.com/adamchainz/django-cors-headers
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000", # Example: Your frontend domain
#     "http://127.0.0.1:3000",
# ]
# CORS_ALLOW_CREDENTIALS = True # If you need to send cookies with CORS requests

# Site ID (Required by django.contrib.sites)
SITE_ID = 1

# Logging Configuration (Example - customize as needed)
# https://docs.djangoproject.com/en/5.2/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO' if not DEBUG else 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        # Add file handler for production if needed
        # 'file': {
        #     'level': 'WARNING',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'logs/django.log',
        #     'formatter': 'verbose',
        # },
    },
    'root': {
        'handlers': ['console'], # Add 'file' here for production
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'], # Add 'file' here for production
            'level': 'INFO', # Adjust log level as needed
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'], # Add 'file' here for production
            'level': 'WARNING', # Log only errors for requests by default
            'propagate': False,
        },
        # Add loggers for your specific apps
        # 'apps': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # },
    },
}

# Placeholder for Elasticsearch settings
# ELASTICSEARCH_DSL = {
#     'default': {
#         'hosts': 'localhost:9200' # Or your Elasticsearch cluster address
#     },
# }

# Simple JWT Settings
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), # Adjust as needed
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True, # Issue new refresh token when refreshing
    "BLACKLIST_AFTER_ROTATION": True, # Blacklist old refresh token
    "UPDATE_LAST_LOGIN": True, # Update user's last_login field on refresh

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY, # Use Django's SECRET_KEY
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",), # Standard "Bearer <token>"
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id", # Use 'id' (UUID) from our user models
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}


print(f"--- Settings Loaded (DEBUG={DEBUG}) ---") # Simple check during startup
